#!/usr/bin/env python
import optparse
import os
import pprint
import re
import shlex
import subprocess
import sys

CC = os.environ.get('CC', 'cc')

root_dir = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(root_dir, 'tools', 'gyp', 'pylib'))
from gyp.common import GetFlavor

# parse our options
parser = optparse.OptionParser()

# Options should be in alphabetical order but keep --prefix at the top,
# that's arguably the one people will be looking for most.
parser.add_option('--prefix',
    action='store',
    dest='prefix',
    help='select the install prefix (defaults to /usr/local)')

parser.add_option('--debug',
    action='store_true',
    dest='debug',
    help='also build debug build')

parser.add_option('--gdb',
    action='store_true',
    dest='gdb',
    help='add gdb support')

parser.add_option('--ninja',
    action='store_true',
    dest='use_ninja',
    help='generate files for the ninja build system')

# TODO document when we've decided on what the tracing API and its options will
# look like
parser.add_option('--systemtap-includes',
    action='store',
    dest='systemtap_includes',
    help=optparse.SUPPRESS_HELP)

parser.add_option('--tag',
    action='store',
    dest='tag',
    help='custom build tag')

parser.add_option('--xcode',
    action='store_true',
    dest='use_xcode',
    help='generate build files for use with xcode')

(options, args) = parser.parse_args()


def b(value):
  """Returns the string 'true' if value is truthy, 'false' otherwise."""
  if value:
      return 'true'
  else:
      return 'false'

def pkg_config(pkg):
    cmd = os.popen('pkg-config --libs %s' % pkg, 'r')
    libs = cmd.readline().strip()
    ret = cmd.close()
    if (ret): return None

    cmd = os.popen('pkg-config --cflags %s' % pkg, 'r')
    cflags = cmd.readline().strip()
    ret = cmd.close()
    if (ret): return None

    return (libs, cflags)

def compiler_version():
  try:
      proc = subprocess.Popen(shlex.split(CC) + ['--version'],
                              stdout=subprocess.PIPE)
  except WindowsError:
      return (0, False)

  is_clang = 'clang' in proc.communicate()[0].split('\n')[0]

  proc = subprocess.Popen(shlex.split(CC) + ['-dumpversion'],
                          stdout=subprocess.PIPE)
  version = tuple(map(int, proc.communicate()[0].split('.')))

  return (version, is_clang)


def configure_officespace(o):
    o['default_configuration'] = 'Debug' if options.debug else 'Release'
    # TODO

# determine the "flavor" (operating system) we're building for,
# leveraging gyp's GetFlavor function
flavor_params = {}
flavor = GetFlavor(flavor_params)

output = {
    'variables': { 'python': sys.executable },
    'include_dirs': [],
    'libraries': [],
    'defines': [],
    'cflags': [],
}

configure_officespace(output)

# variables should be a root level element,
# move everything else to target_defaults
variables = output['variables']
del output['variables']
output = {
    'variables': variables,
    'target_defaults': output
}
pprint.pprint(output, indent=2)

def write(filename, data):
    filename = os.path.join(root_dir, filename)
    print 'creating ', filename
    f = open(filename, 'w+')
    f.write(data)

write('config.gypi', '# Do not edit. Generated by the configure script.\n' +
      pprint.pformat(output, indent=2) + '\n')

config = {
    'BUILDTYPE': 'Debug' if options.debug else 'Release',
    'USE_NINJA': str(int(options.use_ninja or 0)),
    'USE_XCODE': str(int(options.use_xcode or 0)),
    'PYTHON': sys.executable,
}

if options.prefix:
    config['PREFIX'] = options.prefix

config = '\n'.join(map('='.join, config.iteritems())) + '\n'

write('config.mk',
      '# Do not edit. Generated by the configure script.\n' + config)

gyp_args = [sys.executable, 'tools/gyp_officespace.py', '--no-parallel']

if options.use_ninja:
    gyp_args += ['-f', 'ninja-' + flavor]
elif options.use_xcode:
    gyp_args += ['-f', 'xcode']
elif flavor == 'win':
    gyp_args += ['-f', 'msvs', '-G', 'msvs_version=auto']
else:
    gyp_args += ['-f', 'make-' + flavor]

gyp_args += args

subprocess.call(gyp_args)
